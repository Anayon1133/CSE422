# -*- coding: utf-8 -*-
"""A* Algorithm.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pTiGbCOxMgSR5qkPs4evZkDtIWMlsEFq
"""

def get ():
  min = fcost[frontier[0]]
  node = frontier[0]
  for i in range(1, len(frontier)):
      if(int(fcost[frontier[i]]) < int(min)):
          minimum = fcost[frontier[i]]
          node = frontier[i]
  return node

def goalTest (current):
  if(current == goal):
    return True
  return False

def solution (current):
  path.append(current)
  if(current != start):
    solution(parent[current])

parent = {}
gcost = {}
hcost = dict({})
fcost = {}
frontier = []
explored = []
start = ""
goal = ""
alpha = {}
path = []
print(goal)

file = open("/content/drive/My Drive/Colab Notebooks/Alpha.txt")
line = file.readline()
x = line.split(", ")
start = x[0]
k = x[1].split("\n")
goal = k[0]
parent = dict({start:start})
gcost = dict({start:0})
hcost = dict({goal:0})
frontier.append(start)

island = []
current = ""
while(True):
  lines = file.readline()
  
  if(lines == ""):
    break;
  
  else:
    x = lines.split(", ")
    current = x[0]
    for i in range(1, len(x)):
      k = x[i].split("\n")
      island.append(k[0])
    x = []

    lines = file.readline()
    x = lines.split(", ")
    temp = []
    for i in range(0, len(x)):
        k = x[i].split("\n")
        temp.append((island[i], k[0]))
    alpha.update({current : temp})
    temp = []
    island = []
    x = []

    lines = file.readline()
    x = lines.split(", ")
    hcost.update({current:x[0]})
    if current == start:
        fcost.update({current:x[0]})
    x = []

while(len(frontier) != 0):
    current = get()
    if goalTest(current):
      solution(current)
      break
    
    else:
        for child in alpha[current]:
            if child[0] in frontier:
                if (int(gcost[current]) + int(child[1])) < int(gcost[child[0]]):
                    parent[child[0]] = current
                    gcost[child[0]] = int(gcost[current]) + int(child[1])
                    fcost[child[0]] = int(gcost[child[0]]) + int(hcost[child[0]])

            elif child in explored:
                if (int(gcost[current]) + int(child[1])) < int(gcost[child[0]]):
                    parent[child[0]] = current
                    gcost[child[0]] = int(gcost[current]) + int(child[1])
                    fcost[child[0]] = int(gcost[child[0]]) + int(hcost[child[0]])

            else:
                parent[child[0]] = current
                gcost[child[0]] = int(gcost[current]) + int(child[1])
                fcost[child[0]] = int(gcost[child[0]]) + int(hcost[child[0]])
                frontier.append(child[0])

        explored.append(current)
        frontier.remove(current)

print("The optimal path is:")
for i in range(len(path)-1, -1, -1):
  print(path[i])

