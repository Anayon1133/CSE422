# -*- coding: utf-8 -*-
"""17301133 Assignment 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pvfrHx1ekVH_nY0iW-XJh-aYxtZydWZt

#Problem 1 (P2.4.6)
"""

n = int(input("Enter a number:\n"))
r = 1;
if n % 2 == 0:
  for i in range(2,n+1,2):
    r = r*i
else:
  for i in range(1,n+1,2):
    r = r*i
print("Double factorial of", n, "is:", r)

"""#Problem 2 (Q2.5.1)"""

n = int(input("Enter number of items:\n"))
lis = []

for i in range(1,n+1):
  lis.append(int(input("Enter a number:")))

maximum = max(lis)
minimum = min(lis)

print("Previous List:\n[", end='')
for i in range(0,n):
  if i != n-1:
    print(str(lis[i])+", ", end='')
  else:
    print(str(lis[i])+"]")

for i in range(0,n):
  if lis[i] == minimum:
    lis[i]=0.0
  else:
    temp = float(maximum - minimum)
    temp2 = float(temp / float(lis[i] - minimum))
    if(temp2==0):
      temp = 1.0
    else:
      temp = 1.0 / temp2
    lis[i] = temp

print("Normalized List:\n[", end='')
for i in range(0,n):
  if i != n-1:
    print(str(lis[i])+", ", end='')
  else:
    print(str(lis[i])+"]")

"""#Problem 3 (Q2.5.2)"""

import math
x = float(input("Enter value of X:\n"))
y = float(input("Enter value of Y:\n"))
agm = float(0)
while (x != y):
  temp = 0.5 * (x + y)
  y = math.sqrt(x*y)
  x = temp
print("The Arithmatic-Geomatric Mean is:", x)
print("The Gauss's Constant is:", (1.0/x))

"""#Problem 4 (P2.5.2)"""

import math
h = math.sqrt((1.78*(10**-5))*(0.01-0))
prev = 0.0
while("{0:0.9f}".format(h) != "{0:0.9f}".format(prev)):
  prev = h
  h = math.sqrt((1.78*(10**-5))*(0.01-h))
print("Hydrogen ion concentration is: {0:0.10f}".format(h))
print("pH is: {0:0.10f}".format(-1.0*math.log(h,10)))

"""#Problem 5 (P2.5.3)"""

st = input("Enter credit card number:\n")
credit = []
for i in range(0,len(st)):
  if(i%2!=0):
    credit.append(st[i])
  else:
    temp = (int(st[i])*2)
    temp = (temp//10) + (temp%10)
    credit.append(str(temp))
sum = 0
for i in range(0,len(credit)):
  sum = sum + int(credit[i])
if sum%10==0:
  print("This credit card number is valid.")
else:
  print("This credit card number is invalid.")

"""#Problem 6 (P2.5.7)"""

n = int(input("Enter a number:\n"))
lis = [n]
count = 1
while(n!=1):
  if n%2==0:
    n = n//2
  else:
    n = 3*n+1
  lis.append(n)
  count = count +1
print("The Hailstone Sequence:\n")
for i in range(0,len(lis)):
  if i == len(lis)-1:
    print(str(lis[i])+".")
  else:
    print(str(lis[i])+", ",end='')
print("Stopping time:", count)

"""#Problem 7 (P2.5.8)"""

n = int(input("Enter a number:\n"))
prime = [True for i in range(n+1)] 
p = 2
while (p*p <= n):
  if (prime[p] == True):
    for i in range(p*p, n+1, p): 
      prime[i] = False
  p=p+1
print("All prime numbers below",n,"are:\n")
for p in range(2, n): 
    if prime[p]: 
        print (p," ",end='');

"""#Problem 10 (P2.7.1)"""

def scrabble(pos, st):
  row = ord(pos[0])-65+1
  col = 0
  for i in range(1, len(pos)):
    col = col * 10
    col = col + int(pos[i])
  if((15-row+1)<len(st) or (15-col+1)<len(st)):
    return False
  else:
    return True

st = input("Enter a word:\n")
pos = input("Enter placement position:\n")
if(scrabble(pos, st)):
  print("This word can be placed in the Scrabble Grid.")
else:
  print("This word can not be placed in the Scrabble Grid.")

"""#Problem 11 (P2.7.2)"""

def factorial(n):
  if n == 1:
    return 1
    return n * factorial(n-1)

n = 1
while(True):
  fact = factorial(n)
  temp = fact
  sum=0
  while(temp!=0):
    sum = sum + int(temp%10)
    temp = temp/10
  if(fact%sum==0):
    print("Smallest positive integer whose factorial is not divisible by the sum of its digits is:", n)
    break
  n = n+1

"""#Problem 13 (P2.7.4)"""

import math
def pyramid_av(n, s, h):
  a = 0.5 * s * (1/(math.tan(math.pi/n)))
  A = 0.5 * n * s * a
  l = math.sqrt((h**2) + (a**2))
  V = (1/3) * A * h
  S = A + 0.5 * n * s * l
  return V,S

n = float(input("Enter value of n:\n"))
s = float(input("Enter value of s:\n"))
h = float(input("Enter value of h:\n"))

V,S = pyramid_av(n,s,h)
print("Volume:",V)
print("Surface Area:",S)

"""#Problem 14 (P2.7.5)"""

import math
def calculation(v, alpha):
  R = (((v ** 2) * math.sin(2 * math.radians(alpha))) / 9.81)
  H = (((v ** 2) * (math.sin(math.radians(alpha) ** 2))) / (2*9.81))
  return R,H

v = float(input("Enter value of velocity:\n"))
alpha = float(input("Enter value of angle:\n"))

R,H = calculation(v, alpha)
print("Range:",R)
print("Height:",H)

"""#Problem 15 (P2.7.6)"""

import math
def doubleFactorial(n): 
  if (n==0 or n==1): 
    return 1; 
  return n* doubleFactorial(n-2); 
  
n = float(input("Enter value of n:\n"))
m = float(input("Enter value of m:\n"))
res = ((doubleFactorial(m-1) * doubleFactorial(n-1)) / doubleFactorial(m+n))
if(n%2==0 and m%2==0):
  res = ((doubleFactorial(m-1) * doubleFactorial(n-1) * (math.pi/2.0)) / doubleFactorial(m+n))
print("Result of the integral:", res)

"""#Problem 16 (P2.7.7)"""

def checkPalindrome(st, s, e):
  if(st[s]!=st[e]):
    return False
  if (s == e): 
    return True
  if (s < e + 1) : 
    return checkPalindrome(st, s+1, e-1); 
  return True
st = input("Enter a string:\n")
if(checkPalindrome(st, 0, len(st)-1)):
  print("String is palindrome.")
else:
  print("String is not palindrome.")

"""#Problem 17 (P2.7.8)"""

def tetration(n, e, count):
  if(e==0):
    return 1
  global num
  n = n**num
  count = count+1
  if(count==e):
    return n
  return tetration(n, e, count)

num = int(input("Enter a number:\n"))
e = int(input("Enter tetration exponent:\n"))
print("Tetration value is:", tetration(num,e,0))

